name: "Terraform Plan/Apply"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_call:
    inputs:
      working_dir:
        required: false
        type: string
        default: "infra"
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      GH_PAT:
        required: true # renamed from GITHUB_TOKEN to avoid conflict

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    env:
      WORKING_DIR: ${{ inputs.working_dir != '' && inputs.working_dir || 'infra' }}
      ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
      ARM_USE_OIDC: true
      REPO_NAME: "${{ github.event.repository.name }}"
      REPO_OWNER: "${{ github.repository_owner }}"
      ARM_SKIP_PROVIDER_REGISTRATION: true
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      TF_VAR_github_token: ${{ secrets.GH_PAT }}
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GitHub access for private modules
        run: |
          echo -e "machine github.com\nlogin ${{ secrets.GH_PAT }}\npassword x-oauth-basic" > ~/.netrc

      - name: Check if working directory exists
        run: test -d "${{ env.WORKING_DIR }}" || (echo "Directory ${{ env.WORKING_DIR }} not found!" && exit 1)

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ env.WORKING_DIR }}

      # - name: Terraform Plan
      #   id: tf-plan
      #   run: |
      #     export exitcode=0
      #     terraform plan \
      #       -var="github_owner=${{ env.REPO_OWNER }}" \
      #       -var="github_repo=${{ env.REPO_NAME }}" \
      #       -detailed-exitcode -no-color -out tfplan || export exitcode=$?
      #     echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

      #     if [ $exitcode -eq 1 ]; then
      #       echo Terraform Plan Failed!
      #       exit 1
      #     else
      #       exit 0
      #     fi
      #   working-directory: infra

      # ‚Ä¶ up above ‚Ä¶
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan \
          || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ "$exitcode" -eq 1 ]; then
            echo "‚ùå Terraform Plan Failed!"
            exit 1
          fi

          # 0 or 2 ‚áí success, continue
        working-directory: ${{ env.WORKING_DIR }}

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.WORKING_DIR }}/tfplan

      - name: Create String Output
        id: tf-plan-string
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          PLAN_PATH="tfplan"
          if [ ! -f "$PLAN_PATH" ]; then
            echo "‚ö† Skipping summary: no tfplan file."
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            echo "‚ö† No tfplan file found to parse." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 0
          fi

          TERRAFORM_PLAN=$(terraform show -no-color "$PLAN_PATH")
          CREATE_COUNT=$(echo "$TERRAFORM_PLAN" | grep -cE '\+ resource')
          UPDATE_COUNT=$(echo "$TERRAFORM_PLAN" | grep -cE '~ resource')
          DESTROY_COUNT=$(echo "$TERRAFORM_PLAN" | grep -cE '- resource')

          cat <<EOF > plan.md
          ## Terraform Plan Results for \`${{ env.WORKING_DIR }}\` environment

          **Summary:** \`Plan: ${CREATE_COUNT} to add, ${UPDATE_COUNT} to change, ${DESTROY_COUNT} to destroy.\`

          - üü¢ **Create**: ${CREATE_COUNT}
          - üü° **Update**: ${UPDATE_COUNT}
          - üî¥ **Destroy**: ${DESTROY_COUNT}
          EOF

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat plan.md       >> $GITHUB_OUTPUT
          echo "EOF"        >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  terraform-apply:
    name: "Terraform Apply"
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    env:
      WORKING_DIR: ${{ inputs.working_dir != '' && inputs.working_dir || 'infra' }}
      ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
      ARM_USE_OIDC: true
      REPO_NAME: "${{ github.event.repository.name }}"
      REPO_OWNER: "${{ github.repository_owner }}"
      ARM_SKIP_PROVIDER_REGISTRATION: true
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      TF_VAR_github_token: ${{ secrets.GH_PAT }}
    environment: production
    needs: [terraform-plan]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GitHub access for private modules
        run: |
          echo -e "machine github.com\nlogin ${{ secrets.GH_PAT }}\npassword x-oauth-basic" > ~/.netrc

      - name: Check if working directory exists
        run: test -d "${{ env.WORKING_DIR }}" || (echo "Directory ${{ env.WORKING_DIR }} not found!" && exit 1)

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ env.WORKING_DIR }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.WORKING_DIR }}
