name: "Terraform Plan/Apply"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_call:
    inputs:
      working_dir:
        required: false
        type: string
        default: "infra"
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true
      GH_PAT:
        required: true # renamed from GITHUB_TOKEN to avoid conflict

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    env:
      WORKING_DIR: ${{ github.event.inputs.working_dir || 'infra' }}
      ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
      ARM_USE_OIDC: true
      REPO_NAME: "${{ github.event.repository.name }}"
      REPO_OWNER: "${{ github.repository_owner }}"
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ env.WORKING_DIR }}

      # - name: Terraform Plan
      #   id: tf-plan
      #   run: |
      #     export exitcode=0
      #     terraform plan \
      #       -var="github_owner=${{ env.REPO_OWNER }}" \
      #       -var="github_repo=${{ env.REPO_NAME }}" \
      #       -detailed-exitcode -no-color -out tfplan || export exitcode=$?
      #     echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

      #     if [ $exitcode -eq 1 ]; then
      #       echo Terraform Plan Failed!
      #       exit 1
      #     else
      #       exit 0
      #     fi
      #   working-directory: infra

      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi
        working-directory: ${{ env.WORKING_DIR }}

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ inputs.working_dir }}/tfplan

      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
        working-directory: ${{ env.WORKING_DIR }}

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })

  terraform-apply:
    name: "Terraform Apply"
    if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    env:
      WORKING_DIR: ${{ github.event.inputs.working_dir || 'infra' }}
      ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
      ARM_USE_OIDC: true
      REPO_NAME: "${{ github.event.repository.name }}"
      REPO_OWNER: "${{ github.repository_owner }}"
      ARM_SKIP_PROVIDER_REGISTRATION: true
    environment: production
    needs: [terraform-plan]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ${{ env.WORKING_DIR }}

      - name: Terraform Apply
        run: terraform apply -auto-approve "${{ env.WORKING_DIR }}/tfplan"
        working-directory: ${{ env.WORKING_DIR }}
